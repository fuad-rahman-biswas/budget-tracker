import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;

public class budgettracker extends JFrame {
    private Connection connection;
    
    public budgettracker() {
        initComponents();
        initDatabaseConnection();
        loadTransactions();
        addActionListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        amountLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        amountField = new javax.swing.JTextField();
        categoryComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        addExpenseButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        addIncomeButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        balanceLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CashFlow Manager");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        amountLabel.setBackground(new java.awt.Color(204, 204, 255));
        amountLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        amountLabel.setText("AMOUNT");

        categoryLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        categoryLabel.setText("CATEGORY");

        descriptionLabel.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        descriptionLabel.setText("DESCRIPTION");

        amountField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        categoryComboBox.setEditable(true);
        categoryComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Groccery", "Education", "Transport", "Rental", "Salary", "Entertainment", "Food & Beverages", "Shopping", "Telecommunications", "Health & Beauty", "Sports", "Medical", "Utilities", "Others" }));

        descriptionField.setColumns(20);
        descriptionField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        descriptionField.setRows(5);
        jScrollPane1.setViewportView(descriptionField);

        addExpenseButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addExpenseButton.setText("ADD EXPENSE");

        editButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        editButton.setText("EDIT");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        addIncomeButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addIncomeButton1.setText("ADD INCOME");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(amountLabel)
                    .addComponent(categoryLabel)
                    .addComponent(descriptionLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addExpenseButton)
                            .addComponent(addIncomeButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(editButton)))
                        .addGap(150, 154, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(categoryLabel)
                            .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addExpenseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addIncomeButton1)
                        .addGap(65, 65, 65)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionLabel))
                .addGap(19, 19, 19))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 250));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        balanceLabel.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        balanceLabel.setText("CURRENT BALANCE:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(368, Short.MAX_VALUE)
                .addComponent(balanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(balanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 530, 700, 50));

        transactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DATETIME", "AMOUNT", "TYPE", "CATEGORY", "DESCRIPTION"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(transactionTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-8, 250, 710, 290));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

    String selectedCategory = (String) categoryComboBox.getSelectedItem();
    
    if (isNewCategory(selectedCategory)) {
        int option = JOptionPane.showConfirmDialog(this, 
            "The category '" + selectedCategory + "' does not exist. Do you want to add it?", 
            "Add New Category", 
            JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            saveNewCategory(selectedCategory);
            categoryComboBox.addItem(selectedCategory);
            JOptionPane.showMessageDialog(this, "Category added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    } else {
        String amountText = amountField.getText();
        String description = descriptionField.getText();

        if (amountText.isEmpty() || description.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Amount and description cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double amount = Double.parseDouble(amountText);
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

            int selectedRow = transactionTable.getSelectedRow();
            if (selectedRow >= 0) {
                int transactionId = (int) transactionTable.getValueAt(selectedRow, 0); // Assuming ID is in the first column

                try (PreparedStatement stmt = connection.prepareStatement(
                    "UPDATE transactions SET amount = ?, category = ?, description = ? WHERE id = ?")) {
                    stmt.setDouble(1, amount);
                    stmt.setString(2, selectedCategory);
                    stmt.setString(3, description);
                    stmt.setInt(4, transactionId);
                    stmt.executeUpdate();

                    JOptionPane.showMessageDialog(this, "Transaction updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    loadTransactions(); // Refresh the transaction table
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error updating transaction: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No transaction selected.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount format.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    }//GEN-LAST:event_editButtonActionPerformed


    private void initDatabaseConnection() {
        try {
            // Replace the URL, username, and password with your MySQL configurations
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/budgettracker", /*"username"*/, /*"password"*/);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database connection failed!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTransactions() {
        DefaultTableModel model = (DefaultTableModel) transactionTable.getModel();
        model.setRowCount(0);  // Clear existing data

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM transactions")) {

            double balance = 0.0;
            while (rs.next()) {
                String datetime = rs.getString("datetime");
                double amount = rs.getDouble("amount");
                String type = rs.getString("type");
                String category = rs.getString("category");
                String description = rs.getString("description");

                if (type.equalsIgnoreCase("Income")) {
                    balance += amount;
                } else {
                    balance -= amount;
                }

                model.addRow(new Object[]{datetime, amount, type, category, description});
            }
            balanceLabel.setText("Current Balance: " + balance);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addActionListeners() {
        addExpenseButton.addActionListener(new AddTransactionListener("Expense"));
        addIncomeButton1.addActionListener(new AddTransactionListener("Income"));
        editButton.addActionListener(new AddTransactionListener("Income"));
    }

    private class AddTransactionListener implements ActionListener {
    private String type;

    public AddTransactionListener(String type) {
        this.type = type;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            double amount = Double.parseDouble(amountField.getText());
            String category = categoryComboBox.getSelectedItem().toString();
            String description = descriptionField.getText();
            String datetime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

            double currentBalance = calculateCurrentBalance();
            
            if (type.equalsIgnoreCase("Expense") && amount > currentBalance) {
                JOptionPane.showMessageDialog(null, "Insufficient balance to add this expense.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit if balance is insufficient
            }

            try (PreparedStatement stmt = connection.prepareStatement(
                "INSERT INTO transactions (datetime, amount, type, category, description, balance) VALUES (?, ?, ?, ?, ?, ?)")) {
                stmt.setString(1, datetime);
                stmt.setDouble(2, amount);
                stmt.setString(3, type);
                stmt.setString(4, category);
                stmt.setString(5, description);
                stmt.setDouble(6, type.equalsIgnoreCase("Income") ? currentBalance + amount : currentBalance - amount);
                stmt.executeUpdate();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            // Clear the fields after adding the transaction
            amountField.setText("");
            descriptionField.setText("");
            categoryComboBox.setSelectedIndex(0); // Reset to the default category

            loadTransactions();  // Refresh table
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Invalid amount format.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} 
    private void saveNewCategory(String newCategory) {
    try (PreparedStatement stmt = connection.prepareStatement("INSERT INTO categories (name) VALUES (?)")) {
        stmt.setString(1, newCategory);
        stmt.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving new category: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private boolean isNewCategory(String category) {
    try (PreparedStatement stmt = connection.prepareStatement("SELECT COUNT(*) FROM categories WHERE name = ?")) {
        stmt.setString(1, category);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getInt(1) == 0;
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}


    private double calculateCurrentBalance() {
    double balance = 0.0;
    try (Statement stmt = connection.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT * FROM transactions")) {
        
        while (rs.next()) {
            double amount = rs.getDouble("amount");
            String type = rs.getString("type");
            
            if (type.equalsIgnoreCase("Income")) {
                balance += amount;
            } else {
                balance -= amount;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return balance;
}


    
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
        budgettracker tracker = new budgettracker();
        tracker.pack(); // Adjust the window size based on the components
        tracker.setLocationRelativeTo(null); // Center the window on the screen
        tracker.setVisible(true);
    });
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addExpenseButton;
    private javax.swing.JButton addIncomeButton1;
    private javax.swing.JTextField amountField;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable transactionTable;
    // End of variables declaration//GEN-END:variables
}
